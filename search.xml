<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/09/19/12%20.%20Integer%20to%20Roman/</url>
    <content><![CDATA[<p>12 . Integer to Roman</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576337431016.png" alt="1576337431016"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576337461769.png" alt="1576337461769"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576337502315.png" alt="1576337502315"></p>
<p>方法（贪心算法）：<a href=""></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;<span class="comment">//StringBuffer sb = new StringBuffer();</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        String[] strs = <span class="keyword">new</span> String[]      &#123;<span class="string">&quot;M&quot;</span>,<span class="string">&quot;CM&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;XC&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;IX&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(num &gt;= nums[i])&#123;</span><br><span class="line">                   <span class="keyword">int</span> n = num/nums[i];</span><br><span class="line">                   <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                       str += strs[i];<span class="comment">//sn.append(strs[i]);</span></span><br><span class="line">                   num %= nums[i];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">return</span> str;<span class="comment">//return sb.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/3%20.%20%20Longest%20Substring%20Without%20Repeating%20Characters/</url>
    <content><![CDATA[<p>3 .  Longest Substring Without Repeating Characters</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577596907587.png" alt="1577596907587"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577596917333.png" alt="1577596917333"></p>
<p>方法一：（优化的滑动窗口）</p>
<p>时间复杂度：O(N)  空间复杂度：O(1) </p>
<p>此方法与方法二思想相似，下面介绍该方法的逻辑，</p>
<p>创建一个长度为128的数组，这是因为ASCII表中所有的值为128，这样创建的目的是数组的下标0-127刚好对应了ASCII表中的值，从字符串s中取出的值刚好作为下标来搜索无重复子串的开始和结束部分用于计算其长度。</p>
<p>对于已存在的ans数组，将从字符串中取出的值作为下标，其位置存储到数组当中，每当从字符串中取得一个值，将其在数组中存放的位置与原无重复子串的起点比较，取出较大的值，如其上一个位置较大，更新起点，否则不更新，然后判断是否更新无重复子串的最大长度。遍历整个字符串即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>,max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = s.charAt(i);</span><br><span class="line">            start = ans[index] &gt; start?ans[index]:start;<span class="comment">//start = Math.max(start,ans[index]);</span></span><br><span class="line">            ans[index] = i+<span class="number">1</span>;</span><br><span class="line">            max = (i-start+<span class="number">1</span>) &gt; max?i-start+<span class="number">1</span>:max;<span class="comment">// max = Math(max,i-start+1);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：（优化的滑动窗口）（同方法一）</p>
<p>时间复杂度：O(N)</p>
<p>空间复杂度：O(min(m,n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>,max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(s.charAt(i)))</span><br><span class="line">             start = Math.max(start,map.get(s.charAt(i)));</span><br><span class="line">           max = Math.max(max,i-start+<span class="number">1</span>);</span><br><span class="line">           map.put(s.charAt(i),i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：（滑动窗口）</p>
<p>若集合中不存在该值，将其放入集合当中，若存在该值，则从原无重复子串起点开始，移除值，直到不存在该值时，停止，然后将其放入集合当中，计算长度，判断是否更新最大无重复字串的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/13%20.%20Roamn%20to%20Integer/</url>
    <content><![CDATA[<p>13 . Roamn to Integer</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576487639614.png" alt="1576487639614"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576487681393.png" alt="1576487681393"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576487693649.png" alt="1576487693649"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">           <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">           <span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: num+=<span class="number">1000</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: num+=<span class="number">500</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: num+=<span class="number">100</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: num+=<span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: num+=<span class="number">10</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: num+=<span class="number">5</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: num+=<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>((s.charAt(i) == <span class="string">&#x27;M&#x27;</span> || s.charAt(i) == <span class="string">&#x27;D&#x27;</span>) &amp;&amp; s.charAt(i-<span class="number">1</span>) == <span class="string">&#x27;C&#x27;</span>) num = num - <span class="number">200</span>;</span><br><span class="line">               <span class="keyword">if</span>((s.charAt(i) == <span class="string">&#x27;C&#x27;</span> || s.charAt(i) == <span class="string">&#x27;L&#x27;</span>) &amp;&amp; s.charAt(i-<span class="number">1</span>) == <span class="string">&#x27;X&#x27;</span>) num = num - <span class="number">20</span>;</span><br><span class="line">               <span class="keyword">if</span>((s.charAt(i) == <span class="string">&#x27;X&#x27;</span> || s.charAt(i) == <span class="string">&#x27;V&#x27;</span>) &amp;&amp; s.charAt(i-<span class="number">1</span>) == <span class="string">&#x27;I&#x27;</span>) num = num - <span class="number">2</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其实还可以优化一下，因为我们可以发现其中的规律，只要他是一个组合，那么当前数就比前一个数要大，所以我们只需要把当前数取出来，然后和前一个数比较就好了。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> preValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">           <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">           <span class="keyword">int</span> curValue = getCurrentValue(ch);</span><br><span class="line">           <span class="keyword">if</span>(curValue &gt; preValue)&#123;</span><br><span class="line">               num = num + curValue - preValue*<span class="number">2</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               num += curValue;</span><br><span class="line">           &#125;</span><br><span class="line">           preValue = curValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentValue</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: num=<span class="number">1000</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: num=<span class="number">500</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: num=<span class="number">100</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: num=<span class="number">50</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: num=<span class="number">10</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: num=<span class="number">5</span>;<span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: num=<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/6%20.%20ZigZag%20Conversion/</url>
    <content><![CDATA[<p>6 . ZigZag Conversion</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577721025054.png" alt="1577721025054"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577721037315.png" alt="1577721037315"></p>
<p>方法：</p>
<p>时间复杂度：O(N)</p>
<p>空间复杂度：O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">2</span>*numRows-<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; s.length();j = j +num)&#123;</span><br><span class="line">              str.append(s.charAt(j));</span><br><span class="line">              <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + num - <span class="number">2</span>*i &lt; s.length())&#123;</span><br><span class="line">                  str.append(s.charAt(j+num-<span class="number">2</span>*i));</span><br><span class="line">              &#125;&#125;&#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<p>空间复杂度：O(N)</p>
<p>时间复杂度：O(N)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(numRows &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        List&lt;StringBuilder&gt; rows = <span class="keyword">new</span> ArrayList&lt;StringBuilder&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) rows.add(<span class="keyword">new</span> StringBuilder());</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, flag = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            rows.get(i).append(c);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i == numRows -<span class="number">1</span>) flag = - flag;</span><br><span class="line">            i += flag;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(StringBuilder row : rows) res.append(row);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/10%20.%20regular%20%20expression%20Matching/</url>
    <content><![CDATA[<h4 id="10-regular-expression-Matching"><a href="#10-regular-expression-Matching" class="headerlink" title="10 . regular  expression Matching"></a>10 . regular  expression Matching</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574999642605.png" alt="1574999642605"></h4><p>方法一（动态规划）</p>
<ul>
<li>考虑字符串s和字符模型p，假设其长度分别为slen和plen,创建二维数组<code>flag[slen+1][plen+1]</code>来标记之前的字符串是否匹配.其中第一行代表字符串s为空的情况，第一列代表字符串p为空的情况。 比如说考虑字符串“<code>aab</code>” 与“<code>c*a*b</code>”.则如下图<code>flag[1][3]</code>为true表示字符串a与c*a匹配。以此类推，若<code>flag[slen][plen] = true</code>,那么表示字符串s和p可以匹配。那么现在的工作就是如何将这个二维数组填满。</li>
</ul>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575035835804.png" alt="1575035835804"></p>
<ul>
<li><p>考虑<code>flag[i][j]</code>,对应字符串s和p中的值分别是<code>s.charAt(i-1)</code>和<code>p.charAt(j-1)</code>;</p>
<ol>
<li><p>若<code>p.charAt(j-1) == &#39;.&#39;;</code>那么无论<code>s.charAt(i-1)</code>是什么值，它们都将与其匹配，此时只要考虑在此之前的字符串是否匹配即可。即<code>flag[i-1][j-1]</code>是否为true；若为true，<code>flag[i][j] = true</code>；反之，<code>flag[i][j] = false</code>；继续标记下一个点。</p>
</li>
<li><p>若p.charAt(j-1) 是a~z中的任何一个值，那么当满足<code>s.charAt(i-1)==p.charAt(j-1)</code>时才能匹配，考虑之前的字符串是否匹配即可。即<code>flag[i-1][j-1]</code>是否为true；若为true，<code>flag[i][j] = true</code>；反之，<code>flag[i][j] = false</code>；继续标记下一个点。</p>
</li>
<li><p>若<code>p.charAt(j-1) == &#39;*&#39;</code>;此时分情况讨论：</p>
<p>1）若<code>flag[i][j-2] == true;</code>那么<code>flag[i][j] == true;</code>且必定为true；如下图，<code>flag[0][2] == true;</code></p>
<p>考虑<code>flag[0][4]</code>的位置，因为*代表匹配0个或多个字符串，所以当a为0个的时候，此时的字符串仍然匹配。</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575038942557.png" alt="1575038942557"></p>
<p>2）若<code>flag[i][j-2] == false</code>；若<code>p.charAt(j-2) == &#39;.&#39;</code>，那么无论s.charAt(i-1)是什么值，都将与其匹配；若p.charAt(j-2) 是a~z中的任何一个值，那么当满足<code>s.charAt(i-1)==p.charAt(j-2)</code>时才能匹配。其中p.charAt(j-2)是<code>*</code>之前位置的值，注意此时并不能保证<code>flag[i][j] == true</code>;因为我们不能确定在此位置之前的字符串是否匹配。考虑<code>flag[2][4]</code>，当<code>flag[1][4] == true</code>时，说明之前的字符串已经匹配，那么增加一个相同的字符，同样匹配。那么我们就可以肯定此时<code>flag[2][4] == true</code>;若<code>flag[1][4]  == false;</code>那么既然之前字符串不匹配，那么在增加一个字符肯定也不会匹配，<code>flag[2][4] == false</code>;</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575040597284.png" alt="1575040597284"></p>
<p>注意，我们不能像之前1和2中按照<code>flag[i-1][j-1]</code>的值判断是否匹配，我们将s中的b换成a，如下图，考虑<code>flag[3][4]</code>。<code>flag[2][3] == false;</code>因为如果存在多个重复的值，p中单个的值肯定不能与s当中多个重复的值匹配，也就是对于<code>flag[i][j],flag[i-1][j-1]</code>并不一直为true.</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575041376866.png" alt="1575041376866"></p>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slen = s.length(), plen = p.length();</span><br><span class="line">        <span class="keyword">boolean</span>[][] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[slen+<span class="number">1</span>][plen+<span class="number">1</span>];</span><br><span class="line">        flag[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= slen; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= plen; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                    flag[i][j] = flag[i][j-<span class="number">2</span>] || (i &gt; <span class="number">0</span> &amp;&amp;(s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">2</span>)                                    || p.charAt(j-<span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; flag[i-<span class="number">1</span>][j]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    flag[i][j] = i &gt; <span class="number">0</span> &amp;&amp; (s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>) || p.charAt(j-<span class="number">1</span>)                                  == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; flag[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag[slen][plen];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，当前行的值只与当前行以及上一行有关，故可以优化一下空间复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sLen = s.length(), pLen = p.length();</span><br><span class="line">		<span class="keyword">boolean</span>[][] memory = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>][pLen+<span class="number">1</span>];</span><br><span class="line">		memory[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sLen; i++) &#123;</span><br><span class="line">			cur = i % <span class="number">2</span>;<span class="comment">//当前行</span></span><br><span class="line">			pre = (i + <span class="number">1</span>) % <span class="number">2</span>;<span class="comment">//当前行的上一行</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            除第一行外，每次标记之前，将当前行初始化，避免上一行影响，</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">			<span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= pLen; j++) </span><br><span class="line">                    memory[cur][j] = <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= pLen; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">					memory[cur][j] = memory[cur][j-<span class="number">2</span>] || (i &gt; <span class="number">0</span> &amp;&amp; (s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">2</span>) || p.charAt(j-<span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; memory[pre][j]);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					memory[cur][j] = i &gt; <span class="number">0</span> &amp;&amp; (s.charAt(i-<span class="number">1</span>) == p.charAt(j-<span class="number">1</span>) || p.charAt(j-<span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)&amp;&amp; memory[pre][j-<span class="number">1</span>];</span><br><span class="line">				&#125;&#125;&#125;</span><br><span class="line">		<span class="keyword">return</span> memory[cur][pLen];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二（回溯）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern.isEmpty()) <span class="keyword">return</span> text.isEmpty();</span><br><span class="line">        <span class="keyword">boolean</span> first_match = (!text.isEmpty() &amp;&amp;</span><br><span class="line">                               (pattern.charAt(<span class="number">0</span>) == text.charAt(<span class="number">0</span>) || pattern.charAt(<span class="number">0</span>) == <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pattern.length() &gt;= <span class="number">2</span> &amp;&amp; pattern.charAt(<span class="number">1</span>) == <span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (isMatch(text, pattern.substring(<span class="number">2</span>)) ||</span><br><span class="line">                    (first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> first_match &amp;&amp; isMatch(text.substring(<span class="number">1</span>), pattern.substring(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/7%20.%20Reverse%20Integer/</url>
    <content><![CDATA[<p>7 . Reverse Integer</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576161405580.png" alt="1576161405580"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        不考虑是否溢出，将数字翻转</span></span><br><span class="line"><span class="comment">        应考虑正负数取余和求除的操作</span></span><br><span class="line"><span class="comment">        对于正数，直接操作即可；</span></span><br><span class="line"><span class="comment">        对于负数，</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(x !=  <span class="number">0</span>)&#123;</span><br><span class="line">            num = num *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num &gt; Integer.MAX_VALUE || num &lt; Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<p>考虑一个int类型的数x，考虑其可能有溢出的可能，那么其第一位肯定小于等于2；因为最大正整数最后一位和最大负整数最后一位均大于2；所以不需要考虑最后一位，只需要比较除最后一位的前几位就可以了；因为取绝对值之后其他们的前几位都相同，所以翻转之后若得到的数大于这前几位，那么肯定会溢出，要是要与这前几位，那么由于最后一位只能取1或2，所以肯定不会溢出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java和c++中int占四个字节，也就是32位，其中第一位（最高位）为符号为，（1&lt;&lt;31）表示1左移31位，使得符号位为1，其他位为0，再将左移后的结果减一就使得符号位为0，其他位都为1，即为int表示的有符号数的最大整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">&lt;&lt;为位运算中的左移，a&lt;&lt;b表示a向左移动b位，移动后在末尾最低位补0，如1&lt;&lt;2得到100，即10进制的4</span></span><br><span class="line"><span class="comment">对应的&gt;&gt;为位运算中的右移，a&gt;&gt;b表示a向右移动b位，与左移不同的是，如果a为负数，右移后在最高位补1，如果a为正数，右移后在最高位补0 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Integer.MIX_VALUE = 1 &lt;&lt; 31</span></span><br><span class="line"><span class="comment">Integer.MAX_VALUE = (1 &lt;&lt; 31) - 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(res) &gt; Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/8%20.%20String%20to%20Integer(atoi)/</url>
    <content><![CDATA[<p>8 . String to Integer(atoi)</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576236244986.png" alt="1576236244986"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576236280899.png" alt="1576236280899"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576236316015.png" alt="1576236316015"></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1576236334859.png" alt="1576236334859"></p>
<p>我的思路：尴尬 思路不清晰  错了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str == <span class="string">&quot;&quot;</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;-&#x27;</span> || (str.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                flag = str.charAt(i) == <span class="string">&#x27;-&#x27;</span>?<span class="keyword">false</span>:<span class="keyword">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) &lt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &gt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                end = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String newStr = str.substring(start,end);</span><br><span class="line">        <span class="keyword">int</span> len = newStr.length();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">10</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(len &lt; <span class="number">10</span>) <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">            <span class="keyword">int</span> ans = Integer.parseInt(newStr.substring(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(newStr.substring(<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; (<span class="number">1</span>&lt;&lt;<span class="number">31</span>-<span class="number">1</span>)/<span class="number">10</span> || ans == (<span class="number">1</span>&lt;&lt;<span class="number">31</span>-<span class="number">1</span>)/<span class="number">10</span> &amp;&amp; a &gt;=<span class="number">7</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">11</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(len &lt; <span class="number">11</span>) <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">            <span class="keyword">int</span> ans = Integer.parseInt(newStr.substring(<span class="number">0</span>,<span class="number">11</span>));</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(newStr.substring(<span class="number">11</span>));</span><br><span class="line">            <span class="keyword">if</span>(ans &lt; <span class="number">1</span>&lt;&lt;<span class="number">31</span>/<span class="number">10</span> || ans == <span class="number">1</span>&lt;&lt;<span class="number">31</span>/<span class="number">10</span> &amp;&amp; a &gt;=<span class="number">8</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、将给定的字符串开始的空格去掉；</p>
<p>2，判断去掉空格之后的字符串是否为空，若为空，返回0；否则继续下一步；</p>
<p>3、判断第一位是否是允许出现的符号，考虑“+”、“-”，“0~9”，若不是他们的话，就返回0；不然的话就进行下一步。</p>
<p>4、现在可以知道下面这个字符串是一个有可能是一个符合要求的数字了，然后开始截取字符串，此时允许出现的字符串只有“0~9”；如果是的话，就开始截取截取，不是的话，结束循环；</p>
<p>5、这时候我们的得到了一个新的字符串。但是现在并不能确定字符串是否能够转换为数字；考虑以下三种情况：</p>
<p>（1） 当开始截取的时候，字符串等于“+”或者“-”，说明不能转换为数字；返回0；</p>
<p>（2）可以截取数字，但是会超过int类型数字的最大值，或者小于int类型的最小值，那么在进行转换的时候需要考虑捕获异常；若没有捕获到异常，正常进行转换，不然的话就判断第一位是否为“-”，若为“-”，返回Integer.MAX_VALUE,不然的话，返回Integer.MIN_VALUE</p>
<p>(3)最后返回转换后的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        String strr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span> || str.charAt(<span class="number">0</span>) == <span class="string">&#x27;+&#x27;</span> || (str.charAt(<span class="number">0</span>) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(<span class="number">0</span>) &lt;= <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">            strr = str.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) strr = str.substring(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(strr == <span class="keyword">null</span> || strr.equals(<span class="string">&quot;+&quot;</span>) || strr.equals(<span class="string">&quot;-&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            num = Integer.parseInt(strr);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strr.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
