<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode3 无重复字符的最长子串</title>
    <url>/2020/07/05/LeetCode3%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<p>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</p>
<a id="more"></a>

<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;abcabcbb&quot;</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;abc&quot;</span>，所以其长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;bbbbb&quot;</span></span><br><span class="line">输出: <span class="number">1</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;b&quot;</span>，所以其长度为 <span class="number">1</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;pwwkew&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 因为无重复字符的最长子串是 <span class="string">&quot;wke&quot;</span>，所以其长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>

<p>请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a><strong>解答：</strong></h3><p>方法一：（优化的滑动窗口）</p>
<p>时间复杂度：O(N)  </p>
<p>空间复杂度：O(1) </p>
<p>此方法与方法二思想相似，下面介绍该方法的逻辑，</p>
<p>创建一个长度为128的数组，这是因为ASCII表中所有的值为128，这样创建的目的是数组的下标0-127刚好对应了ASCII表中的值，从字符串s中取出的值刚好作为下标来搜索无重复子串的开始和结束部分用于计算其长度。</p>
<p>对于已存在的ans数组，将从字符串中取出的值作为下标，其位置存储到数组当中，每当从字符串中取得一个值，将其在数组中存放的位置与原无重复子串的起点比较，取出较大的值，如其上一个位置较大，更新起点，否则不更新，然后判断是否更新无重复子串的最大长度。遍历整个字符串即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>,max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = s.charAt(i);</span><br><span class="line">            start = ans[index] &gt; start?ans[index]:start;<span class="comment">//start = Math.max(start,ans[index]);</span></span><br><span class="line">            ans[index] = i+<span class="number">1</span>;</span><br><span class="line">            max = (i-start+<span class="number">1</span>) &gt; max?i-start+<span class="number">1</span>:max;<span class="comment">// max = Math(max,i-start+1);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：（优化的滑动窗口）（同方法一）</p>
<p>时间复杂度：O(N)</p>
<p>空间复杂度：O(min(m,n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>,max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(s.charAt(i)))</span><br><span class="line">             start = Math.max(start,map.get(s.charAt(i)));</span><br><span class="line">           max = Math.max(max,i-start+<span class="number">1</span>);</span><br><span class="line">           map.put(s.charAt(i),i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法三：（滑动窗口）</p>
<p>若集合中不存在该值，将其放入集合当中，若存在该值，则从原无重复子串起点开始，移除值，直到不存在该值时，停止，然后将其放入集合当中，计算长度，判断是否更新最大无重复字串的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目来源： <a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">LeetCode 3 无重复字符的最长子串</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>双指针</tag>
        <tag>字符串</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode7 整数反转</title>
    <url>/2020/07/05/LeetCode7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<a id="more"></a>

<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">123</span></span><br><span class="line">输出: <span class="number">321</span></span><br></pre></td></tr></table></figure>

<p> <strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: -<span class="number">123</span></span><br><span class="line">输出: -<span class="number">321</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">120</span></span><br><span class="line">输出: <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p><strong>注意:</strong></p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a><strong>解答：</strong></h3><p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x !=  <span class="number">0</span>)&#123;</span><br><span class="line">            num = num *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num &gt; Integer.MAX_VALUE || num &lt; Integer.MIN_VALUE) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<p>考虑一个int类型的数x，考虑其可能有溢出的可能，那么其第一位肯定小于等于2；因为最大正整数最后一位和最大负整数最后一位均大于2；所以不需要考虑最后一位，只需要比较除最后一位的前几位就可以了；因为取绝对值之后其他们的前几位都相同，所以翻转之后若得到的数大于这前几位，那么肯定会溢出，要是要与这前几位，那么由于最后一位只能取1或2，所以肯定不会溢出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java和c++中int占四个字节，也就是32位，其中第一位（最高位）为符号为，（1&lt;&lt;31）表示1左移31位，使得符号位为1，其他位为0，再将左移后的结果减一就使得符号位为0，其他位都为1，即为int表示的有符号数的最大整数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">&lt;&lt;为位运算中的左移，a&lt;&lt;b表示a向左移动b位，移动后在末尾最低位补0，如1&lt;&lt;2得到100，即10进制的4</span></span><br><span class="line"><span class="comment">对应的&gt;&gt;为位运算中的右移，a&gt;&gt;b表示a向右移动b位，与左移不同的是，如果a为负数，右移后在最高位补1，如果a为正数，右移后在最高位补0 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Integer.MIX_VALUE = 1 &lt;&lt; 31</span></span><br><span class="line"><span class="comment">Integer.MAX_VALUE = (1 &lt;&lt; 31) - 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(res) &gt; Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            res = res * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>题目来源： <a href="https://leetcode-cn.com/problems/reverse-integer/">LeetCode 7 整数反转</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode8 字符串转换整数</title>
    <url>/2020/07/06/LeetCode8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p>
<a id="more"></a>

<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p>
<ul>
<li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li>
<li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li>
<li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li>
</ul>
<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p>
<p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p>
<p><strong>提示：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li>
<li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li>
</ul>
<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;42&quot;</span></span><br><span class="line">输出: <span class="number">42</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;   -42&quot;</span></span><br><span class="line">输出: -<span class="number">42</span></span><br><span class="line">解释: 第一个非空白字符为 <span class="string">&#x27;-&#x27;</span>, 它是一个负号。</span><br><span class="line">     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -<span class="number">42</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;4193 with words&quot;</span></span><br><span class="line">输出: <span class="number">4193</span></span><br><span class="line">解释: 转换截止于数字 <span class="string">&#x27;3&#x27;</span> ，因为它的下一个字符不为数字。</span><br></pre></td></tr></table></figure>

<p><strong>示例 4:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;words and 987&quot;</span></span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 第一个非空字符是 <span class="string">&#x27;w&#x27;</span>, 但它不是数字或正、负号。</span><br><span class="line">     因此无法执行有效的转换。</span><br></pre></td></tr></table></figure>

<p><strong>示例 5:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;-91283472332&quot;</span></span><br><span class="line">输出: -<span class="number">2147483648</span></span><br><span class="line">解释: 数字 <span class="string">&quot;-91283472332&quot;</span> 超过 <span class="number">32</span> 位有符号整数范围。 </span><br><span class="line">     因此返回 INT_MIN (−<span class="number">231</span>) 。</span><br></pre></td></tr></table></figure>

<p>我的思路：尴尬 思路不清晰  错了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str == <span class="string">&quot;&quot;</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">&#x27;-&#x27;</span> || (str.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">                flag = str.charAt(i) == <span class="string">&#x27;-&#x27;</span>?<span class="keyword">false</span>:<span class="keyword">true</span>;</span><br><span class="line">                start = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) &lt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &gt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                end = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String newStr = str.substring(start,end);</span><br><span class="line">        <span class="keyword">int</span> len = newStr.length();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">10</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(len &lt; <span class="number">10</span>) <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">            <span class="keyword">int</span> ans = Integer.parseInt(newStr.substring(<span class="number">0</span>,<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(newStr.substring(<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">if</span>(ans &gt; (<span class="number">1</span>&lt;&lt;<span class="number">31</span>-<span class="number">1</span>)/<span class="number">10</span> || ans == (<span class="number">1</span>&lt;&lt;<span class="number">31</span>-<span class="number">1</span>)/<span class="number">10</span> &amp;&amp; a &gt;=<span class="number">7</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">11</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">if</span>(len &lt; <span class="number">11</span>) <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">            <span class="keyword">int</span> ans = Integer.parseInt(newStr.substring(<span class="number">0</span>,<span class="number">11</span>));</span><br><span class="line">            <span class="keyword">int</span> a = Integer.parseInt(newStr.substring(<span class="number">11</span>));</span><br><span class="line">            <span class="keyword">if</span>(ans &lt; <span class="number">1</span>&lt;&lt;<span class="number">31</span>/<span class="number">10</span> || ans == <span class="number">1</span>&lt;&lt;<span class="number">31</span>/<span class="number">10</span> &amp;&amp; a &gt;=<span class="number">8</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> Integer.parseInt(newStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>逻辑分析：</strong></p>
<p>1、将给定的字符串开始的空格去掉；</p>
<p>2，判断去掉空格之后的字符串是否为空，若为空，返回0；否则继续下一步；</p>
<p>3、判断第一位是否是允许出现的符号，考虑“+”、“-”，“0~9”，若不是他们的话，就返回0；不然的话就进行下一步。</p>
<p>4、现在可以知道下面这个字符串是一个有可能是一个符合要求的数字了，然后开始截取字符串，此时允许出现的字符串只有“0~9”；如果是的话，就开始截取截取，不是的话，结束循环；</p>
<p>5、这时候我们的得到了一个新的字符串。但是现在并不能确定字符串是否能够转换为数字；考虑以下三种情况：</p>
<p>（1） 当开始截取的时候，字符串等于“+”或者“-”，说明不能转换为数字；返回0；</p>
<p>（2）可以截取数字，但是会超过int类型数字的最大值，或者小于int类型的最小值，那么在进行转换的时候需要考虑捕获异常；若没有捕获到异常，正常进行转换，不然的话就判断第一位是否为“-”，若为“-”，返回Integer.MAX_VALUE,不然的话，返回Integer.MIN_VALUE</p>
<p>(3)最后返回转换后的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        String strr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span> || str.charAt(<span class="number">0</span>) == <span class="string">&#x27;+&#x27;</span> || (str.charAt(<span class="number">0</span>) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(<span class="number">0</span>) &lt;= <span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">            strr = str.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) strr = str.substring(<span class="number">0</span>,i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(strr == <span class="keyword">null</span> || strr.equals(<span class="string">&quot;+&quot;</span>) || strr.equals(<span class="string">&quot;-&quot;</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            num = Integer.parseInt(strr);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strr.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目来源：<a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">LeetCode8 字符串转换整数</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode9 回文数</title>
    <url>/2020/07/06/LeetCode9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<a id="more"></a>

<p><strong>示例 1:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">121</span></span><br><span class="line">输出: <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入: -<span class="number">121</span></span><br><span class="line">输出: <span class="keyword">false</span></span><br><span class="line">解释: 从左向右读, 为 -<span class="number">121</span> 。 从右向左读, 为 <span class="number">121</span>- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<p>这道题是#7题的延伸，对于给定的数x，考虑如下：</p>
<p>1 、x为负数，那么它肯定不是回文数，返回false；</p>
<p>2、翻转x，然后将其与原数字比较，相等返回true，不等则返回false；这里应当注意的是，不需要考虑溢出的问题，理由如下：</p>
<p>（1）若x为回文数，那么翻转过后的数字肯定也是回文数，不会溢出；</p>
<p>（2）若x不是回文数，若不会溢出，直接比较即可，若会溢出，那么溢出的值等于翻转过后的值截取前32位即可，两者肯定不会相等（万一相等了怎么办？但是能保证一般不会相等），故也直接比较就行了；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = x;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(ans != <span class="number">0</span>)&#123;</span><br><span class="line">            num = num*<span class="number">10</span> + ans%<span class="number">10</span>;</span><br><span class="line">            ans /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num == x ? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目来源：<a href="https://leetcode-cn.com/problems/palindrome-number/">LeetCode9 回文数</a></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
